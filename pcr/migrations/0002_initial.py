# Generated by Django 4.2.6 on 2023-12-07 20:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('pcr', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='tube',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='thermalcyclerprotocol',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sample',
            name='assays',
            field=models.ManyToManyField(to='pcr.assay'),
        ),
        migrations.AddField(
            model_name='sample',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcr.batch'),
        ),
        migrations.AddField(
            model_name='sample',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reagentextraction',
            name='protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcr.extractionprotocol'),
        ),
        migrations.AddField(
            model_name='reagentextraction',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcr.reagent'),
        ),
        migrations.AddField(
            model_name='reagentassay',
            name='assay',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcr.assay'),
        ),
        migrations.AddField(
            model_name='reagentassay',
            name='reagent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcr.reagent'),
        ),
        migrations.AddField(
            model_name='reagent',
            name='location',
            field=models.ManyToManyField(to='pcr.location'),
        ),
        migrations.AddField(
            model_name='reagent',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='processplate',
            name='plate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pcr.plate'),
        ),
        migrations.AddField(
            model_name='processplate',
            name='process',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pcr.process'),
        ),
        migrations.AddField(
            model_name='processplate',
            name='protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pcr.thermalcyclerprotocol'),
        ),
        migrations.AddField(
            model_name='processplate',
            name='samples',
            field=models.ManyToManyField(to='pcr.sample'),
        ),
        migrations.AddField(
            model_name='processplate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='process',
            name='plate',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pcr.plate'),
        ),
        migrations.AddField(
            model_name='process',
            name='protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pcr.thermalcyclerprotocol'),
        ),
        migrations.AddField(
            model_name='process',
            name='samples',
            field=models.ManyToManyField(to='pcr.sample'),
        ),
        migrations.AddField(
            model_name='process',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='plate',
            name='location',
            field=models.ManyToManyField(to='pcr.location'),
        ),
        migrations.AddField(
            model_name='plate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='location',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fluorescence',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='extractionprotocol',
            name='reagents',
            field=models.ManyToManyField(through='pcr.ReagentExtraction', to='pcr.reagent'),
        ),
        migrations.AddField(
            model_name='extractionprotocol',
            name='tubes',
            field=models.ManyToManyField(through='pcr.TubeExtraction', to='pcr.tube'),
        ),
        migrations.AddField(
            model_name='extractionprotocol',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='control',
            name='location',
            field=models.ManyToManyField(to='pcr.location'),
        ),
        migrations.AddField(
            model_name='control',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='batch',
            name='code',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pcr.assaycode'),
        ),
        migrations.AddField(
            model_name='batch',
            name='extraction_protocol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='pcr.extractionprotocol'),
        ),
        migrations.AddField(
            model_name='batch',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assaycode',
            name='assays',
            field=models.ManyToManyField(to='pcr.assay'),
        ),
        migrations.AddField(
            model_name='assaycode',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assay',
            name='controls',
            field=models.ManyToManyField(to='pcr.control'),
        ),
        migrations.AddField(
            model_name='assay',
            name='fluorescence',
            field=models.ManyToManyField(to='pcr.fluorescence'),
        ),
        migrations.AddField(
            model_name='assay',
            name='reagents',
            field=models.ManyToManyField(through='pcr.ReagentAssay', to='pcr.reagent'),
        ),
        migrations.AddField(
            model_name='assay',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='thermalcyclerprotocol',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='thermal_cycler_protocol_unique', violation_error_message='A protocol with this name already exists.'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.UniqueConstraint(fields=('user', 'lab_id_num'), name='user_lab_id_unique', violation_error_message='A batch with this lab ID already exists.'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='location_unique', violation_error_message='A location with the same name already exists.'),
        ),
        migrations.AddConstraint(
            model_name='fluorescence',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='flourescence_unique', violation_error_message='Flourescense with this name already exists.'),
        ),
        migrations.AddConstraint(
            model_name='extractionprotocol',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='extraction_protocol_unique', violation_error_message='An extraction protocol with this name already exists.'),
        ),
        migrations.AddConstraint(
            model_name='control',
            constraint=models.UniqueConstraint(fields=('user', 'lot_number'), name='control_unique', violation_error_message='Control with this lot number already exists.'),
        ),
        migrations.AddConstraint(
            model_name='batch',
            constraint=models.UniqueConstraint(fields=('user', 'lab_id'), name='batch_unique', violation_error_message='A batch with this lab ID already exists.'),
        ),
        migrations.AddConstraint(
            model_name='assaycode',
            constraint=models.UniqueConstraint(fields=('user', 'name'), name='assay_code_unique', violation_error_message='An assay list/group with this name already exists.'),
        ),
        migrations.AddConstraint(
            model_name='assay',
            constraint=models.UniqueConstraint(fields=('user', 'name', 'method'), name='assay_unique', violation_error_message='An assay with this name and method already exists.'),
        ),
    ]
